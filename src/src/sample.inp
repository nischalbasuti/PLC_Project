######################################
# Program to print fibonacci series. #
######################################

int prev = 0;
int curr = 1;
int temp = 1;
int count = 0; # Count number of iterations. #
array:20 fib = [0]; # Array to store fibbonacci series. #
boolean run = true; # Set this to false to stop while loop. #
while run do
begin

    temp = curr;
    curr = prev + curr;
    prev = temp;

    fib[count] = prev;

    # Stupid code to demonstrate boolean #
    if count >= 20-1 then
    begin
        run = false;
    end;

    count = count + 1;
end;

count = 0;
char str = "";
while (count<20) do
begin
    str = str+", "+fib[count];
    count = count+1;
end;
print "Array "+fib;
print "String "+str;
###########################################

###########################################
# Demonstrating cartesian product(struct) #
###########################################

struct person = {name : "nischal", age : 21, major: "CS"};
print person->name;
print person->age + 3;
print person->name + " is " + person->age +" years old";

###########################################


###########################
# Demonstrating Functions #
###########################
char str="global fuck";
char globStr="global fuck globStr";
def myfunction(int a, char foo)
begin
    char str = "local str";
    print ""+a+" "+foo+" "+str;
    print "from local: "+globStr;
    globStr = "modified in local";
end;

print str;

myfunction(1,"sup");

print str;
print "from global: "+globStr;

def functwo(int arg1)
begin
    char str = "";
    if arg1 == 1 then
    begin
        str = str+functwo(2);
    end;
    return str+arg1;
end;

char returnedChar =  functwo(1);
print returnedChar;
#############################


def outerFunction(int arg1)
begin
    char outerStr = "outer string";
    def innerFunction(int arg1)
    begin
        outerStr = "modified outer string";

        return outerStr;
    end;
    print innerFunction(1);
    print outerStr;
end;

outerFunction(2);

def functionWithEmptyArgs()
begin
    print "this is a function with no arguments";
    return 1;
end;
functionWithEmptyArgs();